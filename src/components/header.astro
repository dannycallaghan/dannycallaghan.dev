---
import { Icon } from "astro-icon/components"
import type { NavItem } from "../types";

const navItems: Array<NavItem> = [
  { title: "About Me", url: "#about" },
  { title: "Work / Projects", url: "#projects" },
  { title: "Tutoring", url: "#tutoring" },
  { title: "Contact", url: "#contact" },
];
---

<header
  id="page-header"
  class="absolute bottom-0 z-20 flex w-full items-center justify-between border-b border-transparent px-8 py-4 text-white"
>
  <a class="flex items-center gap-3 hover:!text-default" href="#">
    <h1 class="text-khand uppercase">Danny Callaghan</h1>
  </a>
  <div>
    <div class="flex items-center gap-6">
      <nav class="hidden sm:block">
        <ul class="flex items-center gap-6">
          {
            navItems.map(({ title, url }) => (
              <li>
                <a href={`#${url}`} class="group text-secondary hover:text-primary transition duration-300 !outline-none focus:!outline-none">
                  {title}
                  <span class="block max-w-0 group-hover:max-w-full transition-all duration-500 h-0.5 bg-primary"></span>
                </a>
              </li>
            ))
          }
        </ul>
      </nav>
      <button
        id="open-nav-button"
        type="button"
        class="btn sm:hidden"
        aria-label="Navigation"
      >
        <Icon name="mdi:menu" class="h-8" />
      </button>
    </div>
    <div id="menu-modal" class="modal hidden" aria-hidden="true">
      <div class="fixed inset-0 bg-default px-8 py-4 text-default">
        <div class="space-y-4" role="dialog" aria-modal="true">
          <header class="text-right">
            <button
              id="close-nav-button"
              type="button"
              class="btn"
              aria-label="Close navigation"
            >
              <Icon name="mdi:close" class="h-8" />
            </button>
          </header>
          <nav>
            <ul class="flex flex-col">
              {
                navItems.map(({ title, url }) => (
                  <li class="text-center">
                    <a href="#" class="inline-block mx-auto py-4 text-center text-xl group text-secondary hover:text-primary transition duration-300">
                      {title}
                      <span class="block max-w-0 group-hover:max-w-full transition-all duration-500 h-0.5 bg-primary"></span>
                    </a>
                  </li>
                ))
              }
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  const menuModalId = "menu-modal";

  const header = document.querySelector("#page-header") as HTMLElement;
  const page = document.documentElement;
  const menu = document.querySelector(`#${menuModalId} ul`);
  const openNavButton = document.querySelector("#open-nav-button");
  const closeNavButton = document.querySelector("#close-nav-button");
  const navLinks = document.querySelectorAll("nav a");

  invariant(header, "header should not be null");
  invariant(menu, "menu should not be null");
  invariant(openNavButton, "openNavButton should not be null");
  invariant(closeNavButton, "closeNavButton should not be null");
  invariant(navLinks, "navLinks should not be empty");

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  openNavButton.addEventListener("click", openMenu);
  closeNavButton.addEventListener("click", closeMenu);

  const checkHeaderLocation = () => {
    const d = page.clientHeight - page.scrollTop - header.offsetHeight;
    header.classList.toggle("fixed-header", d < 0);
  }

  window.addEventListener('DOMContentLoaded', () => {
    checkHeaderLocation();
  });

  document.addEventListener("scroll", () => {
    checkHeaderLocation();
  });

  menu.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).tagName === "A") {
      closeMenu();
    }
  });

  Array.from(navLinks).map(link => {
    link.addEventListener('click', (event) => {
      event.preventDefault();
      const target = (event.target as HTMLAnchorElement);
      const ref = target.href.substring(target.href.lastIndexOf('#') + 1);
      target.blur();
      document.getElementById(ref)?.scrollIntoView({ behavior: 'smooth'});
    });
  });
</script>

<noscript>
  <style>
    #open-nav-button {
      display: none;
    }
  </style>
</noscript>

<style>
  .fixed-header {
    @apply fixed bottom-auto top-0;
    @apply border-default bg-default text-default;
  }
  .modal.is-open {
    @apply block;
  }
</style>
